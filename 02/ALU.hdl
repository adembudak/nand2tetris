/**
   The ALU (Arithmetic Logic Unit).
   Computes one of the following functions:
   x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
   x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
   according to 6 input bits denoted zx,nx,zy,ny,f,no.

   In addition, the ALU computes two 1-bit outputs:
   if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
   if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.

   Implementation: the ALU logic manipulates the x and y inputs
   and operates on the resulting values, as follows:
   if (zx == 1) set x = 0        // 16-bit constant
   if (nx == 1) set x = !x       // bitwise not

   if (zy == 1) set y = 0        // 16-bit constant
   if (ny == 1) set y = !y       // bitwise not

   if (f == 1)  set out = x + y  // integer 2's complement addition
   if (f == 0)  set out = x & y  // bitwise and

   if (no == 1) set out = !out   // bitwise not

   if (out == 0) set zr = 1
   if (out < 0) set ng = 1
 */

CHIP ALU {
   IN  x[16], y[16], zx, nx, zy, ny, f, no;
   OUT out[16], zr, ng;

   PARTS:
   Mux16(a=x, b[0..15]=false, sel=zx, out=zxDone);
   Not16(in=zxDone, out=negX);
   Mux16(a=zxDone, b=negX, sel=nx, out=nxDone);

   Mux16(a=y, b[0..15]=false,  sel=zy, out=zyDone);
   Not16(in=zyDone, out=negY);
   Mux16(a=zyDone, b=negY, sel=ny, out=nyDone);

   Add16(a=nxDone, b=nyDone, out=xPlusy);
   And16(a=nxDone, b=nyDone, out=xAndy);
   Mux16(a=xAndy, b=xPlusy, sel=f, out=fDone);

   Not16(in=fDone, out=notResult);
   Mux16(a=fDone, b=notResult, sel=no, out[15]=msb, out[0..7]=lo, out[8..15]=hi, out=out);

   And(a=msb, b=true, out=ng); 

   Or8Way(in=hi, out=hii);
   Or8Way(in=lo, out=loo);
   Or(a=hii, b=loo, out=zrr);
   Not(in=zrr, out=zr);
}
